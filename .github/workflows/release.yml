name: Release
on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: The new version to release, e.g. 1.0.0. (don't include the 'v' prefix)
        type: string
        required: true
        default: '1.0.0'
      nextDevelopmentVersion:
        description: >
          The new version to use during development, e.g. 1.1.0-SNAPSHOT
        type: string
        required: true
        default: '1.0.0-SNAPSHOT'
      dryRun:
        description: dryRun. Don't push commits or tags.will only print the changes.
        type: boolean
        default: true
concurrency: release
jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      releaseVersion: ${{ inputs.releaseVersion }}
    steps:
      - uses: actions/checkout@v4
        with:
            token: ${{ secrets.RELEASE_WORKFLOW_TOKEN }}

      - name: Set release version in package.json
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: '"version": "[0-9\.]+(-SNAPSHOT)?"'
          replace: '"version": "${{ inputs.releaseVersion }}"'
          include: package.json
          regex: true

      - name: Set release version in README example
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: 'publish-release-to-confluence@v[0-9\.]+'
          replace: 'publish-release-to-confluence@v${{ inputs.releaseVersion }}'
          include: README.md
          regex: true

      - name: Commit new release version
        id: commit-new-release
        uses: EndBug/add-and-commit@v9
        with:
          commit: --signoff
          default_author: github_actions
          fetch: false
          message: 'dist: release ${{ inputs.releaseVersion }}'
          push: ${{ inputs.dryRun == false }}
          tag: v${{ inputs.releaseVersion }}

      - name: Print new release version commit
        run: git show ${{ steps.commit-new-release.outputs.commit_sha }} | cat

      - name: Set development version in package.json
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: '"version": "${{ inputs.releaseVersion }}"'
          replace: '"version": "${{ inputs.nextDevelopmentVersion }}"'
          include: 'package.json'
          regex: false

      - name: Extract semver release version components
        uses: madhead/semver-utils@v3
        id: version
        with:
          version: ${{ inputs.releaseVersion }}

      - name: Create and move major/minor tags
        run: |
          git tag v${{ steps.version.outputs.major }} --force
          git tag v${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }} --force

      - name: Push major/minor tags
        if: ${{ inputs.dryRun == false }}
        run: |
          git push origin v${{ steps.version.outputs.major }} --force
          git push origin v${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }} --force

      - name: Update release-next-preview workflow
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: 'v(\d+)\.next-preview'
          replace: 'v${{ steps.version.outputs.major }}.next-preview'
          include: '.github/workflows/release-next-preview.yml'
          regex: true

      - name: Commit next development version
        id: commit-next-dev
        uses: EndBug/add-and-commit@v9
        with:
          commit: --signoff
          default_author: github_actions
          fetch: false
          message: 'dist: release ${{ inputs.nextDevelopmentVersion }}'
          push: ${{ inputs.dryRun == false }}

      - name: Print next development version commit
        run: git show ${{ steps.commit-next-dev.outputs.commit_sha }} | cat

  create-confluence-page:
    runs-on: ubuntu-latest
    needs: [ release ]
    steps:

      - name: Publish to Confluence
        id: run_action
        uses: Gershon-A/publish-release-to-confluence@main
        with:
          spaceId: ${{ vars.SPACE_ID}}
          status: 'current'
          title: "Release: ${{ github.ref_name }}"
          parentId: ${{ vars.PAGE_ID}}
          ConfluenceBaseUrl: 'https://smart-cooking.atlassian.net'
          tag: v${{ needs.release.outputs.releaseVersion }}
          confluence_email: ${{ vars.CONFLUENCE_EMAIL }}
          confluence_api_token: ${{ secrets.CONFLUENCE_API_TOKEN }}
          appName:   ${{ github.event.repository.name }}
          repoOwner: ${{ github.repository_owner }}
          repoName:  ${{ github.event.repository.name }}