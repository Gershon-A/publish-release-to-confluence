name: Publish to Confluence
author: Gershon Alvais
description: Confluence Release BOT. This action will create a release page in confluence with the release notes.
branding:
  icon: "book"
  color: "blue"

inputs:
  # Confluence configs
  spaceId:
    description: Confluence space id. This is the space where the release page will be created.
    required: true
    type: string
  status:
    required: true
    type: string
  title:
    description: Title of the page.  Release tag.
    required: true
    type: string
  parentId:
    description: Parent page id. The release page will be created under this page.
    required: true
    type: string
  ConfluenceBaseUrl:
    description: Confluence base url
    required: true
    type: string
  ConfluenceSpaceKey:
    description: Confluence space key
    type: string
  # Release notes
  tag:
    required: true
    type: string
  confluence_email:
    description: 'Confluence Email'
    required: true
    type: string
  confluence_api_token:
    description: 'Confluence API Token'
    required: true
    type: string
  appName:
    Description: Name of the app. This will be used in the release notes.
    required: true
    type: string
  repoOwner:
    Description: Owner of the repository. This will be used to fetch the release notes.
    required: true
    type: string
  repoName:
    Description: Name of the repository. This will be used to fetch the release notes.
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Get Release
      id: get-release
      uses: actions/github-script@v7
      with:
        script: |
          const tag = '${{ inputs.tag }}';
          const release = await github.rest.repos.getReleaseByTag({
            owner: '${{ inputs.repoOwner }}',
            repo: '${{ inputs.repoName }}',
            tag: tag
          });
          if (!release || !release.data.body) {
              console.error('Invalid release');
              return;
          }
          console.log(release.data.body);
          return {
              body: release.data.body,
              url: `https://github.com/${{ inputs.repoOwner }}/${{ inputs.repoName }}/releases/tag/${tag}`
          };

    - name: Post Release Notes to Confluence
      id: post_to_confluence
      shell: bash
      env:
        RELEASE_NOTES: ${{ fromJSON(steps.get-release.outputs.result).body }}
        RELEASE_URL: ${{ fromJSON(steps.get-release.outputs.result).url }}
      run: |
        # Add additional line before the content
        RELEASE_NOTES="âœ… New *${{ inputs.appName }}* Release [${{ inputs.tag }}](${RELEASE_URL}) $(date)\n\n${RELEASE_NOTES}"

        # Remove '##' from RELEASE_NOTES
        RELEASE_NOTES=$(echo -e "${RELEASE_NOTES}" | sed 's/## //g')

        # Remove extra HTML
        RELEASE_NOTES=$(echo -e "${RELEASE_NOTES}" | sed -r 's/<[^>]*>//g')

        # Replace markdown links with confluence links
        RELEASE_NOTES=$(echo -e "${RELEASE_NOTES}" | sed -r 's/\[([^]]+)\]\(([^)]+)\)/[\1|\2]/g')

        # Replace @username with a link to the user's GitHub profile
        RELEASE_NOTES=$(echo -e "${RELEASE_NOTES}" | sed -r 's/@([^ ]+)/[@\1|https:\/\/github.com\/\1]/g')

        # Replace '\n' with '<br/>'
        RELEASE_NOTES=$(echo -e "${RELEASE_NOTES}" | sed 's/\\n/<br\/>/g')

        # Prepare the payload
        payload=$(jq -n \
        --arg spaceId "${{ inputs.spaceId }}" \
        --arg status "${{ inputs.status }}" \
        --arg title "Release: ${{ inputs.tag }}" \
        --arg parentId "${{ inputs.parentId }}" \
        --arg value "$RELEASE_NOTES" \
        '{
            "spaceId": $spaceId,
            "status": $status,
            "title": $title,
            "parentId": $parentId,
            "body": {
            "representation": "wiki",
            "value": $value
            }
        }'
        )

        echo "Payload: $payload"
        response=$(curl --request POST \
            --url '${{ inputs.ConfluenceBaseUrl }}/wiki/api/v2/pages' \
            --user '${{ inputs.confluence_email }}:${{ inputs.confluence_api_token }}' \
            --header 'Accept: application/json' \
            --header 'Content-Type: application/json' \
            --data "$payload")
        echo "Response: $response"
        pageId=$(echo "$response" | jq -r '.id')
        echo "Page ID: $pageId"
        if [ "$pageId" == "null" ]; then
          echo "Failed to create page"
          exit 1
        fi
        echo "pageId=$pageId" >> $GITHUB_ENV
        echo "::save-state name=pageId::$pageId"
